<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<ItemGroup>
		<AvailableItemName Include="SyntaxDefinition" />
		<AvailableItemName Include="SyntaxTestDefinition" />
		<AvailableItemName Include="BoundTreeDefinition" />
	</ItemGroup>
	<ItemDefinitionGroup>
		<SyntaxDefinition>
			<GenerateSource>True</GenerateSource>
			<GenerateTests>False</GenerateTests>
		</SyntaxDefinition>
	</ItemDefinitionGroup>

	<PropertyGroup>
		<CompileDependsOn>
			GenerateSyntaxModel;
			GenerateSyntaxModelTests;
			GenerateBoundTree;
			GenerateErrorFacts;
			$(CompileDependsOn)
		</CompileDependsOn>
	</PropertyGroup>

	<PropertyGroup>
		<CleanDependsOn>
			CleanSyntaxModel;
			CleanSyntaxModelTests;
			CleanBoundTree;
			CleanErrorFacts;
			$(CleanDependsOn)
		</CleanDependsOn>
	</PropertyGroup>

	<Target
		Name="GenerateSyntaxModel"
		Inputs="@(SyntaxDefinition);$(VBSyntaxGeneratorToolPath);$(CSharpSyntaxGeneratorToolPath)"
		Outputs="@(SyntaxDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')"
		Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'">
		<PropertyGroup Condition="'$(Language)' == 'VB'">
			<SyntaxGenerator>$(VBSyntaxGeneratorToolPath)</SyntaxGenerator>
		</PropertyGroup>
		<PropertyGroup Condition="'$(Language)' == 'C#'">
			<SyntaxGenerator>$(CSharpSyntaxGeneratorToolPath)</SyntaxGenerator>
		</PropertyGroup>
		<PropertyGroup>
			<GeneratedSyntaxModel>@(SyntaxDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModel>
		</PropertyGroup>

		<Exec 
			Command='"$(SyntaxGenerator)" @(SyntaxDefinition) $(GeneratedSyntaxModel)' 
			Outputs="$(GeneratedSyntaxModel)">
			<Output TaskParameter="Outputs" ItemName="FileWrites" />
		</Exec>

	</Target>

	<Target Name="CleanSyntaxModel">
		<PropertyGroup>
			<GeneratedSyntaxModel>@(SyntaxDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModel>
		</PropertyGroup>

		<Delete Files="$(GeneratedSyntaxModel)" />
	</Target>

	<Target 
		Name="GenerateSyntaxModelTests" 
		Inputs="@(SyntaxTestDefinition);$(VBSyntaxGeneratorToolPath);$(CSharpSyntaxGeneratorToolPath)"
		Outputs="@(SyntaxTestDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')"
		Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'">
		<PropertyGroup Condition="'$(Language)' == 'VB'">
			<SyntaxGenerator>$(VBSyntaxGeneratorToolPath)</SyntaxGenerator>
		</PropertyGroup>
		<PropertyGroup Condition="'$(Language)' == 'C#'">
			<SyntaxGenerator>$(CSharpSyntaxGeneratorToolPath)</SyntaxGenerator>
		</PropertyGroup>
		<PropertyGroup>
			<GeneratedSyntaxModelTests>@(SyntaxTestDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModelTests>
		</PropertyGroup>
		<Exec Command='"$(SyntaxGenerator)" @(SyntaxTestDefinition) $(GeneratedSyntaxModelTests) /test' Outputs="$(GeneratedSyntaxModelTests)">
			<Output TaskParameter="Outputs" ItemName="FileWrites" />
		</Exec>
	</Target>

	<Target 
		Name="CleanSyntaxModelTests" 
		Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'">
		<PropertyGroup>
			<GeneratedSyntaxModelTests>@(SyntaxTestDefinition -> '$(IntermediateOutputPath)\%(FileName)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedSyntaxModelTests>
		</PropertyGroup>

		<Delete Files="$(GeneratedSyntaxModelTests)" />
	</Target>

	<Target Name="GenerateBoundTree" 
			Inputs="@(BoundTreeDefinition);$(BoundTreeGeneratorToolPath)" 
			Outputs="@(BoundTreeDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')"
			Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'">
		<PropertyGroup>
			<BoundTreeGenerator>$(BoundTreeGeneratorToolPath)</BoundTreeGenerator>
			<GeneratedBoundTree>@(BoundTreeDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedBoundTree>
		</PropertyGroup>

		<Exec Condition="('$(Language)' == 'VB' or '$(Language)' == 'C#') and '$(LanguageJava)' == ''"
			Command='"$(BoundTreeGenerator)" $(Language) @(BoundTreeDefinition) $(GeneratedBoundTree)' 
			Outputs="$(GeneratedBoundTree)" >
			<Output TaskParameter="Outputs" ItemName="FileWrites" />
		</Exec>

		<Exec Condition="('$(Language)' == 'VB' or '$(Language)' == 'C#') and '$(LanguageJava)' == 'Java'"
	Command='"$(BoundTreeGenerator)" Java @(BoundTreeDefinition) $(GeneratedBoundTree)'
	Outputs="$(GeneratedBoundTree)" >
			<Output TaskParameter="Outputs" ItemName="FileWrites" />
		</Exec>

		<!--<Exec Condition="'$(LanguageJava)' == 'Java'"
	Command='"$(BoundTreeGenerator)" Java @(BoundTreeDefinition) $(GeneratedBoundTree)'
	Outputs="$(GeneratedBoundTree)" >
			<Output TaskParameter="Outputs" ItemName="FileWrites" />
		</Exec>-->

		<!--<Message Condition="('$(Language)' == 'VB' or '$(Language)' == 'C#') and '$(LanguageJava)' == 'Java'"  Text="lan is java"></Message>
		<Message Condition="('$(Language)' == 'VB' or '$(Language)' == 'C#') and '$(LanguageJava)' == ''"  Text="lan is emmpty"></Message>-->

		<!--<Exec Condition="('$(Language)' == 'VB' or '$(Language)' == 'C#') and '$(LanguageJava)' == 'Java'"
			Command='"$(BoundTreeGenerator)" Java @(BoundTreeDefinition) $(GeneratedBoundTree)'
			Outputs="$(GeneratedBoundTree)" >
			<Output TaskParameter="Outputs" ItemName="FileWrites" />
		</Exec>-->
	</Target>

	<Target
	  Name="CleanBoundTree"
	  Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'"
  >
		<PropertyGroup>
			<GeneratedBoundTree>@(BoundTreeDefinition -> '$(IntermediateOutputPath)%(Filename)%(Extension).Generated$(DefaultLanguageSourceExtension)')</GeneratedBoundTree>
		</PropertyGroup>

		<Delete Files="$(GeneratedBoundTree)" />
	</Target>

	<Target
	  Name="GenerateErrorFacts"
	  Inputs="@(ErrorCode);$(CSharpErrorFactsGeneratorToolPath)"
	  Outputs="@(ErrorCode -> '$(IntermediateOutputPath)ErrorFacts.Generated$(DefaultLanguageSourceExtension)')"
	  Condition="'$(Language)' == 'C#'"
  >
		<PropertyGroup>
			<ErrorFactsGenerator>$(CSharpErrorFactsGeneratorToolPath)</ErrorFactsGenerator>
			<GeneratedErrorFacts>@(ErrorCode -> '$(IntermediateOutputPath)ErrorFacts.Generated$(DefaultLanguageSourceExtension)')</GeneratedErrorFacts>
		</PropertyGroup>

		<Exec
		  Command='"$(ErrorFactsGenerator)" @(ErrorCode) $(GeneratedErrorFacts)'
		  Outputs="$(GeneratedErrorFacts)"
    >
			<Output TaskParameter="Outputs" ItemName="FileWrites" />
		</Exec>
	</Target>

	<Target
	  Name="CleanErrorFacts"
	  Condition="'$(Language)' == 'C#'"
  >
		<PropertyGroup>
			<GeneratedErrorFacts>@(ErrorCode -> '$(IntermediateOutputPath)ErrorFacts.Generated$(DefaultLanguageSourceExtension)')</GeneratedErrorFacts>
		</PropertyGroup>

		<Delete Files="$(GeneratedErrorFacts)" />
	</Target>

</Project>
